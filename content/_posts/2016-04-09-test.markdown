---
comments: true
layout: post
title: Test Post
---

Test

{% xdot png %}
    digraph finite_state_machine {
    rankdir=LR;
    center=true;
    size="8"
    node [shape = circle];
    Standby_Router [label="Router", color="grey"];
    Standby_Firewall [label="Firewall", color="grey"];
    Standby_LoadBalancer [label="LoadBalancer", color="grey", shape="square"];
    LoadBalancer [label="LoadBalancer", shape="square"];
    Server_1 [label="Server"];
    Server_2 [label="Server"];
    Server_3 [label="Server"];
    Internet -> Router;
    Internet -> Standby_Router [color="grey"];
    Router -> Firewall;
    Router -> Standby_Firewall [color="grey"];
    Firewall -> LoadBalancer;
    Firewall -> Standby_LoadBalancer [color="grey"];
    LoadBalancer -> Standby_LoadBalancer;
    Standby_LoadBalancer -> LoadBalancer;
    LoadBalancer -> Server_1;
    LoadBalancer -> Server_2;
    LoadBalancer -> Server_3;
    Standby_LoadBalancer -> Server_1 [color="grey"];
    Standby_LoadBalancer -> Server_2 [color="grey"];
    Standby_LoadBalancer -> Server_3 [color="grey"];
    overlap=false;
    fontsize=10;
}
{% endxdot %}

{% xdot png %}  
    digraph finite_state_machine {
    rankdir=LR;
    center=true;
    size="8"
    node [shape = circle];
    Standby_Router [label="Router", color="grey"];
    Spine_1 [label="Spine"];
    Spine_2 [label="Spine"];
    Leaf_1 [label="Leaf"];
    Leaf_2 [label="Leaf"];
    LoadBalancer_1 [label="LoadBalancer", shape="square"];
    LoadBalancer_2 [label="LoadBalancer", shape="square"];
    Server_1 [label="Server"];
    Server_2 [label="Server"];
    Server_3 [label="Server"];
    Internet -> Router;
    Internet -> Standby_Router [color="grey"];
    Router -> Spine_1;
    Router -> Spine_2;
    Spine_1 -> Leaf_1;
    Spine_1 -> Leaf_2;
    Spine_2 -> Leaf_1;
    Spine_2 -> Leaf_2;
    Leaf_1 -> LoadBalancer_1;
    Leaf_2 -> LoadBalancer_2;
    LoadBalancer_1 -> Server_1;
    LoadBalancer_1 -> Server_2;
    LoadBalancer_1 -> Server_3;
    LoadBalancer_2 -> Server_1;
    LoadBalancer_2 -> Server_2;
    LoadBalancer_2 -> Server_3;
    overlap=false;
    fontsize=10;
}
{% endxdot %}

{% xdot png %}  
    digraph finite_state_machine {
    rankdir=LR;
    center=true;
    size="8"
    node [shape = circle];
    Standby_Router [label="Router", color="grey"];
    Spine_1 [label="Spine"];
    Spine_2 [label="Spine"];
    Spine_3 [label="Spine"];
    Spine_4 [label="Spine"];
    Leaf_1 [label="Leaf"];
    Leaf_2 [label="Leaf"];
    LoadBalancer_1 [label="LoadBalancer", shape="square"];
    LoadBalancer_2 [label="LoadBalancer", shape="square"];
    Server_1 [label="Server"];
    Server_2 [label="Server"];
    Server_3 [label="Server"];
    Internet -> Router;
    Internet -> Standby_Router [color="grey"];
    Router -> Spine_1;
    Router -> Spine_2;
    Router -> Spine_3;
    Router -> Spine_4;
    Spine_1 -> Leaf_1;
    Spine_1 -> Leaf_2;
    Spine_2 -> Leaf_1;
    Spine_2 -> Leaf_2;
    Spine_3 -> Leaf_1;
    Spine_3 -> Leaf_2;
    Spine_4 -> Leaf_1;
    Spine_4 -> Leaf_2;
    Leaf_1 -> LoadBalancer_1;
    Leaf_2 -> LoadBalancer_2;
    LoadBalancer_1 -> Server_1;
    LoadBalancer_1 -> Server_2;
    LoadBalancer_1 -> Server_3;
    LoadBalancer_2 -> Server_1;
    LoadBalancer_2 -> Server_2;
    LoadBalancer_2 -> Server_3;
    overlap=false;
    fontsize=10;
}
{% endxdot %}

{% xdot png %}  
    digraph finite_state_machine {
    rankdir=LR;
    center=true;
    size="8"
    node [shape = circle];
    Standby_Router [label="Router", color="grey"];
    Spine_1 [label="Spine"];
    Spine_2 [label="Spine"];
    Leaf_1 [label="Leaf"];
    Leaf_2 [label="Leaf"];
    LoadBalancer_1 [label="LoadBalancer", shape="square"];
    LoadBalancer_2 [label="LoadBalancer", shape="square"];
    LoadBalancer_3 [label="LoadBalancer", shape="square"];
    LoadBalancer_4 [label="LoadBalancer", shape="square"];
    Server_1 [label="Server"];
    Server_2 [label="Server"];
    Server_3 [label="Server"];
    Internet -> Router;
    Internet -> Standby_Router [color="grey"];
    Router -> Spine_1;
    Router -> Spine_2;
    Spine_1 -> Leaf_1;
    Spine_1 -> Leaf_2;
    Spine_2 -> Leaf_1;
    Spine_2 -> Leaf_2;
    Leaf_1 -> LoadBalancer_1;
    Leaf_1 -> LoadBalancer_3;
    Leaf_2 -> LoadBalancer_2;
    Leaf_2 -> LoadBalancer_4;
    LoadBalancer_1 -> Server_1;
    LoadBalancer_1 -> Server_2;
    LoadBalancer_1 -> Server_3;
    LoadBalancer_2 -> Server_1;
    LoadBalancer_2 -> Server_2;
    LoadBalancer_2 -> Server_3;
    LoadBalancer_3 -> Server_1;
    LoadBalancer_3 -> Server_2;
    LoadBalancer_3 -> Server_3;
    LoadBalancer_4 -> Server_1;
    LoadBalancer_4 -> Server_2;
    LoadBalancer_4 -> Server_3;
    overlap=false;
    fontsize=10;
}
{% endxdot %}

{% xdot png %}  
    digraph finite_state_machine {
    rankdir=LR;
    center=true;
    size="8"
    node [shape = circle];
    Standby_Router [label="Router", color="grey"];
    Spine_1 [label="Spine"];
    Spine_2 [label="Spine"];
    Leaf_1 [label="Leaf"];
    Leaf_2 [label="Leaf"];
    Leaf_3 [label="Leaf"];
    Leaf_4 [label="Leaf"];
    LoadBalancer_1 [label="LoadBalancer", shape="square"];
    LoadBalancer_2 [label="LoadBalancer", shape="square"];
    LoadBalancer_3 [label="LoadBalancer", shape="square"];
    LoadBalancer_4 [label="LoadBalancer", shape="square"];
    Server_1 [label="Server"];
    Server_2 [label="Server"];
    Server_3 [label="Server"];
    Internet -> Router;
    Internet -> Standby_Router [color="grey"];
    Router -> Spine_1;
    Router -> Spine_2;
    Spine_1 -> Leaf_1;
    Spine_1 -> Leaf_2;
    Spine_1 -> Leaf_3;
    Spine_1 -> Leaf_4;
    Spine_2 -> Leaf_1;
    Spine_2 -> Leaf_2;
    Spine_2 -> Leaf_3;
    Spine_2 -> Leaf_4;
    Leaf_1 -> LoadBalancer_1;
    Leaf_3 -> LoadBalancer_3;
    Leaf_2 -> LoadBalancer_2;
    Leaf_4 -> LoadBalancer_4;
    LoadBalancer_1 -> Server_1;
    LoadBalancer_1 -> Server_2;
    LoadBalancer_1 -> Server_3;
    LoadBalancer_2 -> Server_1;
    LoadBalancer_2 -> Server_2;
    LoadBalancer_2 -> Server_3;
    LoadBalancer_3 -> Server_1;
    LoadBalancer_3 -> Server_2;
    LoadBalancer_3 -> Server_3;
    LoadBalancer_4 -> Server_1;
    LoadBalancer_4 -> Server_2;
    LoadBalancer_4 -> Server_3;
    overlap=false;
    fontsize=10;
}
{% endxdot %}
